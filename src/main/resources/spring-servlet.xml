<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">

    <!-- 声明使用注解的风格 -->
    <context:annotation-config />
    <!-- 开启mvc注解 -->
    <mvc:annotation-driven />
    
    <!-- 允许对静态资源文件的访问
        <mvc:default-servlet-handler default-servlet-name="可以显示设置servlet容器默认servlet(默认为default)"/>
     -->

    <!-- 默认扫描的包路径 -->
    <context:component-scan base-package="com.ddup" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 静态资源的访问 在servlet容器中配置过这里就算了
	    <mvc:resources mapping="/css/**" location="/css/" />
	    <mvc:resources mapping="/images/**" location="/images/" />
	    <mvc:resources mapping="/js/**" location="/js/" />
     -->

    <!-- 模型试图前后缀 -->
    <bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="suffix" value=".jsp" />
    </bean>
    
    <!--配置拦截器, 多个拦截器,顺序执行 -->
    <mvc:interceptors>  
        <mvc:interceptor>  
            <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->
            <mvc:mapping path="/" />
            <mvc:mapping path="/user/**" />
            <mvc:mapping path="/privilege/**" />
            <mvc:mapping path="/role/**" />
            <bean class="com.ddup.base.CenterInterceptor"></bean>
        </mvc:interceptor>
        <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
    </mvc:interceptors>

    <!-- 错误处理
    <bean
        class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionAttribute" value="ex"></property>
        <property name="exceptionMappings">
            <props>
                <prop key="com.boc.core.exception.MobileException">cardapply/mobile/commons/error</prop>
                <prop key="com.boc.core.exception.PCException">cardapply/pc/commons/error</prop>
            </props>
        </property>
    </bean> -->
</beans>