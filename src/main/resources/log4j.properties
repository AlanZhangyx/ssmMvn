log4j.rootCategory=INFO,CON,logFile

#Console
log4j.appender.CON=org.apache.log4j.ConsoleAppender
log4j.appender.CON.layout=org.apache.log4j.PatternLayout
log4j.appender.CON.layout.ConversionPattern=%-5p %d{yyyy-MM-dd HH:mm:ss} %c %m%n

#File
#log4j.appender.logFile= org.apache.log4j.FileAppender
#log4j.appender.logFile=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.logFile.Threshold=ERROR
#log4j.appender.logFile.ImmediateFlush=true
#log4j.appender.logFile.Append=true
#log4j.appender.logFile.File=${ssmMvn.root}/WEB-INF/logs/ssmMvn.log
#log4j.appender.logFile.layout=org.apache.log4j.PatternLayout
#log4j.appender.logFile.layout.ConversionPattern=[framework] %d - %c -%r [%t] %-10p %c %x - %m%n
#log4j.appender.logFile.DatePattern='.'yyyyMMdd


#Ibatis Mybatis
log4j.logger.com.ibatis=debug
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=debug
log4j.logger.com.ibatis.common.jdbc.ScriptRunner=debug
log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=debug
log4j.logger.java.sql.Connection=debug
log4j.logger.java.sql.Statement=debug
log4j.logger.java.sql.PreparedStatement=debug


##### 1 配置文件基本格式  ######
#1.1 配置根Logger
#log4j.rootLogger=[level],appenderName1,appenderName2,…
#
#1.2 配置日志信息输出目的地Appender
#log4j.appender.appenderName=fully.qualified.name.of.appender.class 
#　　log4j.appender.appenderName.option1=value1 
#　　… 
#　　log4j.appender.appenderName.optionN=valueN 
#
#1.3 配置日志信息的格式（布局）
#log4j.appender.appenderName.layout=fully.qualified.name.of.layout.class 
#　　log4j.appender.appenderName.layout.option1=value1 
#　　… 
#　　log4j.appender.appenderName.layout.optionN=valueN  
#
#
##### 2 具体解释  ######
#2.1 level:输出级别，共5级
#   0:fatal:严重错误信息
#   3:error:错误信息
#   4:warn:警告信息
#   6:info:一般信息
#   7:debug:调试信息
#
#2.2 Appender:日志输出目的地，共5种
#   org.apache.log4j.ConsoleAppender（控制台），
#   org.apache.log4j.FileAppender（文件），
#   org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#   org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#   org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方） 
#
#2.3 Layout：日志输出格式，Log4j提供的layout有以下4种：
#   org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#   org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#   org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#   org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#
#2.4 打印参数：Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，如下:
#   %m:输出代码中指定的消息
#　　%p:输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
#　　%r:输出自应用启动到输出该log信息耗费的毫秒数 
#　　%c:输出所属的类目，通常就是所在类的全名 
#　　%t:输出产生该日志事件的线程名 
#　　%n:输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n” 
#　　%d:输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921  
#　　%l:输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 ) 

### 设置具体包下的输出级别 ###
#log4j.logger.com.orclight.rbac=INFO,console,logFile
#log4j.logger.org.springframework=ERROR,console 